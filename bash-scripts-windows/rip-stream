#!/bin/bash

#+========================================================+#
# rip-stream                                               # 
#+========================================================+#

# exit status, error codes
SUCCESS=0      # success exit code
E_WRONGARGS=65 # wrong number of arguments passed to script
E_NOMATCH=66   # url not matched by regular expression

# script usage
script_usage="Usage: $(basename "$0") [(http|https|rtmp|rtmpe)://example.com/video-url] ([-t] [00:00:00])"

#+========================================================+#
# + validate user input for first, second, third arguments #
# - passed to script                                       #
# + second and third arguments passed to script are used   #
# - to specify a recording duration                        #
# + check if 1 or 3 arguments are passed to script         #
# - validate user input and enable shell globbing          #
#+========================================================+#

# check number of arguments passed to script and exit if not correct
[[ $# -eq 1 ]] || { printf "%s\n" "$script_usage"; exit "$E_WRONGARGS"; }

# check if first argument is a text file or on the command line
[[ "$1" =~ \.txt$ ]] && videourl=$(<"$1") || videourl="$1"

first_arg_validated="^(http|https|rtmp|rtmpe)://*" # matches: http|https|rtmp|rtmpe
second_arg_validated="^-t$"                        # matches: -t
third_arg_validated="^[0-9]{2}:[0-9]{2}:[0-9]{2}$" # matches: 00:00:00

tflag="$2"     # second argument should be: -t
duration="$3"  # third argument should be in this format: 00:00:00

if [[ $# -eq 1 ]]; then                               # + one argument is passed to the script
   if ! [[ $videourl =~ $first_arg_validated ]]; then # - if videourl doesnt match validation regular expression
      printf "%s\n%s\n" "'$videourl' invalid input" "$script_usage" # - display invalid user input with error message
      exit "$E_NOMATCH"                               # - exit with E_NOMATCH error code
   fi
else [[ $# -eq 3 ]]                                   # + three arguments are passed to the script, validate user input
   if ! [[ $videourl =~ $first_arg_validated && $tflag =~ $second_arg_validated && $duration =~ $third_arg_validated ]]; then
      printf "%s\n%s\n" "'$1 $2 $3' invalid input" "$script_usage" # - display invalid user input with error message
      exit "$E_NOMATCH"                               # - exit with E_NOMATCH error code
   fi
fi

shopt -s extglob # enable shell globbing 

#+========================================================+#
# case statement switch on pattern match                   #
#+========================================================+#

videofile="@(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.@(mkv|mp4|avi|flv)"
m3u8="@(http|https)://[a-zA-Z0-9:0-9./?=_,@\&%-]*\.m3u8"
videoqmark="@(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.@(mkv|mp4|avi|flv|m3u8)?([^|])[a-zA-Z0-9=?&]*([^|])"
viduseragent="@(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.@(mkv|mp4|avi|flv|m3u8)?([a-zA-Z0-9?\&=%*])*\|[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;%+_-]*([^&])"
useragentreferer="@(http|https)://[a-zA-Z0-9:0-9./?=_\&@%-]*\.@(mkv|mp4|avi|flv|m3u8)?([a-zA-Z0-9=?&]*)\|[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;\&@%+-]*\&[rR]eferer=@(http|https)@(://|%3A%2F%2F)[a-zA-Z%0-9./?=_-]*"
useref="@(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.@(mkv|mp4|avi|flv)\|[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;%+-]*\&[rR]eferer=@(http|https)@(://|%3A%2F%2F)[a-zA-Z%0-9./?=_-]*"
refuseragent="@(http|https)://[a-zA-Z0-9:0-9./?=_-]*?(.m3u8)\|[rR]eferer=@(http|https)@(://|%3A%2F%2F)[a-zA-Z%0-9./?=_-]*\&[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;%+-]*"
xforward="@(http|https)://[a-zA-Z0-9./?=_@%-]*\.m3u8\|X-Forwarded-For=+([0-9])\.+([0-9])\.+([0-9])\.+([0-9])"
http="@(http|https)://[a-zA-Z0-9:0-9/.\&;,~*?%@_=-]*"
rtmp="@(rtmp|rtmpe)://[a-zA-Z0-9[:blank:]#%@!()_=:-/.\&;,~*?]*"
cookiem3u8="@(http|https)://[a-zA-Z0-9:0-9./?=_,@\&%-]*\.m3u8\?nltid=[a-zA-Z0-9\&%_*=]*"
cookiem3u8uagent="@(http|https)://[a-zA-Z0-9:0-9./?=_,@\&%-]*\.@(mkv|mp4|avi|flv|m3u8)?([a-zA-Z0-9/?\&=%.*_-])*\|[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;%+_-]*\&Cookie[a-zA-Z0-9=_]*"

#+========================================================+#
# grep inside url to extract strings                       #
#+========================================================+#

videofile_grep=$(grep -Eo '(http|https)://[a-zA-Z0-9:0-9./?=_,@&%-]*\.(m3u8|mkv|mp4|avi|flv)?([a-zA-Z0-9?&=%*_-]*[^|])' <<< "$videourl" | sed q) 
useragent=$(grep -Eo 'u?User-a?Agent=[a-zA-Z0-9/.()[:blank:],:;%+_-]*[^&]' <<< "$videourl")
useragent2=$(grep -Eo 'u?User-a?Agent=[a-zA-Z0-9/.()[:blank:],:;%+_-]*[^&]' <<< "$videourl" | sed 's/[uU]ser-[aA]gent=//g')
referer=$(grep -Eo 'r?Referer=(http|https)(://|%3A%2F%2F)[a-zA-Z%0-9./?=_-]*' <<< "$videourl" | sed 's/[rR]eferer=//')
xforwardip=$(grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' <<< "$videourl")
cookieurl=$(grep -Eo '[cC]ookie=[a-zA-Z0-9/&%_*~;=_[:blank:]]*' <<< "$videourl" | sed 's/[cC]ookie=//')
cookienltid=$(grep -Eo 'nltid=[a-zA-Z0-9&%_*=]*' <<< "$videourl")
cookiedomain=$(grep -Eo '(http|https)://[a-zA-Z0-9.-]*[^/]' <<< "$videourl" | sed 's/^http\(\|s\):\/\///g')

#+========================================================+#
# streaming functions using ffmpeg and rtmpdump           +#
#+========================================================+#

stream () {
ffmpeg -hide_banner -stats -v panic "${@:2}" -i "$1" \
-c:v libx265 -preset ultrafast -tune zero-latency \
-x265-params crf=28 \
-c:a aac -strict experimental -b:a 192k \
$tflag $duration \
-maxrate 4000k -bufsize 4000k \
-f mpegts udp://239.253.253.4:1234?pkt_size=1316
}

stream_rtmp () {
rtmpdump -q -i "$1" | ffmpeg -hide_banner -stats -v panic -i - \
-c:v libx265 -preset ultrafast -tune zero-latency \
-x265-params crf=28 \
-c:a aac -strict experimental -b:a 192k \
-f mpegts udp://239.253.253.4:1234?pkt_size=1316
}

#+========================================================+#
# + case statement with regular expression                 #
# - to execute ffmpeg commands based on matching url       #
#+========================================================+#

printf "%s\n" "Streaming to: 'udp://@239.253.253.4:1234'"

case "$videourl" in
  $videofile) stream "$videourl";;
  $m3u8) stream "$videourl";;
  $cookiem3u8) stream "$videourl" -cookies "$cookienltid; path=/; $cookiedomain;";;
  $videoqmark) stream "$videourl";;
  $xforward) stream "$videofile_grep" -headers 'X-Forwarded-For: '"$xforwardip"''$'\r\n';;
  $useref) stream "$videofile_grep" -user-agent "$useragent" -headers 'Referer: '"$referer"''$'\r\n';;
  $viduseragent) stream "$videofile_grep" -user-agent "$useragent";;
  $useragentreferer) stream "$videofile_grep" -user-agent "$useragent" -headers 'Referer: '"$referer"''$'\r\n';;
  $refuseragent) stream "$videofile_grep" -headers 'Referer: '"$referer"''$'\r\n' -user-agent "$useragent";;
  $rtmp) stream_rtmp "$videourl";;
  $cookiem3u8uagent) stream "$videofile_grep" -user-agent "$useragent2" -cookies "$cookieurl; path=/; $cookiedomain;";;
  $http) stream "$videourl";;
  *) stream "$videourl";;
esac 

shopt -u extglob # turn off shell globbing
exit "$SUCCESS" # exit status SUCCESS if script runs without errors
