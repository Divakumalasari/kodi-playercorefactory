#!/bin/bash

#+==========================================================+#
# rip-record - execute ffmpeg commands based on matching url #
#+==========================================================+#

# diagram of how the script works
# [rip-record] > [(text file with url|url on command line)] > [case-statement -match url] > [grep -extract strings] > [ffmpeg]

#+=========================================================+#
# exit status and error codes                               #
#+=========================================================+#

SUCCESS=0      # success exit code
E_NOARGS=65    # no arguments passed to script
E_WRONGARGS=66 # wrong number of arguments passed to script
E_NOMATCH=67   # url not matched by regular expression

#+=========================================================+#
# display script usage when script is run with no arguments #
# + or when invalid input is entered by the user            #
#+=========================================================+#

script_usage="Usage: $(basename "$0") [(http|https|rtmp|rtmpe)://example.com/video-url] ([-t] [00:00:00])"

#+=========================================================+#
# validate user input for first, second and third arguments #
# + passed to script	by matching with regular expressions   #
#+=========================================================+#

first_arg_validated="^(http|https|rtmp|rtmpe)://*" # matches: http|https|rtmp|rtmpe
second_arg_validated="^-t$"                        # matches: -t
third_arg_validated="^[0-9]{2}:[0-9]{2}:[0-9]{2}$" # matches: 00:00:00

#+========================================================+#
# second and third arguments passed to script are used     #
# + to specify a recording duration                        #
#+========================================================+#

tflag="$2"     # second argument should be: -t
duration="$3"  # third argument should be in this format: 00:00:00

#+========================================================+#
# check if first argument is a url in a text file          #
# + or a url on the command line                           #
#+========================================================+#

if [[ "$1" =~ \.txt$ ]]; then # - text file passed as first argument to script
	videourl=$(cat "$1")       # + cat the text file to extract the url
else
	videourl="$1"              # url is on the command line
fi

#+========================================================+#
# check if 1 or 3 arguments are passed to script           #
# + and validate user input                                #
#+========================================================+#

if [[ $# -eq 1 ]]; then                               # - one argument is passed to the script
	if ! [[ $videourl =~ $first_arg_validated ]]; then # + if videourl doesnt match validation regular expression
		printf "%s\n" "'$videourl' invalid input"       # + display invalid user input with error message
		printf "%s\n" "$script_usage"                   # + display script usage
		exit "$E_NOMATCH"                               # + exit with E_NOMATCH error code
	fi
elif [[ $# -eq 3 ]]; then                             # - three arguments are passed to the script, validate user input
	if ! [[ $videourl =~ $first_arg_validated && $tflag =~ $second_arg_validated && $duration =~ $third_arg_validated ]]; then
		printf "%s\n" "'$1 $2 $3' invalid input"        # + display invalid user input with error message
		printf "%s\n" "$script_usage"                   # + display script usage
		exit "$E_NOMATCH"                               # + exit with E_NOMATCH error code
	fi
else [[ $# -eq 0 ]]                                   # - no arguments are passed to the script
   printf "%s\n" "$script_usage"                      # + display script usage
	exit "$E_NOARGS"                                   # + exit with E_NOARGS error code
fi

#+========================================================+#
# enable shell globbing for pattern matching               #
#+========================================================+#

shopt -s extglob 

#+========================================================+#
# desktop notifications when recording is complete         #
#+========================================================+#

notify='/Applications/terminal-notifier.app/Contents/MacOS/terminal-notifier'

#+========================================================+#
# case statement switch on pattern match                   #
#+========================================================+#

videofile="@(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.@(mkv|mp4|avi|flv)"
m3u8="@(http|https)://[a-zA-Z0-9:0-9./?=_,@\&%-]*\.m3u8"
videoqmark="@(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.@(mkv|mp4|avi|flv|m3u8)?([^|])[a-zA-Z0-9=?&]*([^|])"
viduseragent="@(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.@(mkv|mp4|avi|flv|m3u8)?([a-zA-Z0-9?\&=%*])*\|[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;%+_-]*([^&])"
useragentreferer="@(http|https)://[a-zA-Z0-9:0-9./?=_\&@%-]*\.@(mkv|mp4|avi|flv|m3u8)?([a-zA-Z0-9=?&]*)\|[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;\&@%+-]*\&[rR]eferer=@(http|https)@(://|%3A%2F%2F)[a-zA-Z%0-9./?=_-]*"
useref="@(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.@(mkv|mp4|avi|flv)\|[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;%+-]*\&[rR]eferer=@(http|https)@(://|%3A%2F%2F)[a-zA-Z%0-9./?=_-]*"
refuseragent="@(http|https)://[a-zA-Z0-9:0-9./?=_-]*?(.m3u8)\|[rR]eferer=@(http|https)@(://|%3A%2F%2F)[a-zA-Z%0-9./?=_-]*\&[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;%+-]*"
xforward="@(http|https)://[a-zA-Z0-9./?=_@%-]*\.m3u8\|X-Forwarded-For=+([0-9])\.+([0-9])\.+([0-9])\.+([0-9])"
http="@(http|https)://[a-zA-Z0-9:0-9/.\&;,~*?%@_=-]*"
rtmp="@(rtmp|rtmpe)://[a-zA-Z0-9[:blank:]#%@!()_=:-/.\&;,~*?]*"
cookiem3u8="@(http|https)://[a-zA-Z0-9:0-9./?=_,@\&%-]*\.m3u8\?nltid=[a-zA-Z0-9\&%_*=]*"
cookiem3u8uagent="@(http|https)://[a-zA-Z0-9:0-9./?=_,@\&%-]*\.@(mkv|mp4|avi|flv|m3u8)?([a-zA-Z0-9/?\&=%.*_-])*\|[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;%+_-]*\&Cookie[a-zA-Z0-9=_]*"

#+========================================================+#
# grep inside url to extract strings                       #
#+========================================================+#

videofile_grep=$(printf "%s" "$videourl" | grep -Eo '(http|https)://[a-zA-Z0-9:0-9./?=_,@&%-]*\.(m3u8|mkv|mp4|avi|flv)?([a-zA-Z0-9?&=%*_-]*[^|])' | sed q) 
useragent=$(printf "%s" "$videourl" | grep -Eo 'u?User-a?Agent=[a-zA-Z0-9/.()[:blank:],:;%+_-]*[^&]')
useragent2=$(printf "%s" "$videourl" | grep -Eo 'u?User-a?Agent=[a-zA-Z0-9/.()[:blank:],:;%+_-]*[^&]' | sed 's/[uU]ser-[aA]gent=//g')
referer=$(printf "%s" "$videourl" | grep -Eo 'r?Referer=(http|https)(://|%3A%2F%2F)[a-zA-Z%0-9./?=_-]*'| sed 's/[rR]eferer=//')
xforwardip=$(printf "%s" "$videourl" | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
cookieurl=$(printf "%s" "$videourl" | grep -Eo '[cC]ookie=[a-zA-Z0-9/&%_*~;=_[:blank:]]*' | sed 's/[cC]ookie=//')
cookienltid=$(printf "%s" "$videourl" | grep -Eo 'nltid=[a-zA-Z0-9&%_*=]*')
cookiedomain=$(printf "%s" "$videourl" | grep -Eo '(http|https)://[a-zA-Z0-9.-]*[^/]' | sed 's/^http\(\|s\):\/\///g')

#+========================================================+#
# recording functions using ffmpeg and rtmpdump           +#
#+========================================================+#

# ffmpeg function
record () {
printf "%s\n" "Recording: '$videourl'"
count=0 # set count to zero
while [[ "$count" < 3 ]]; do # while count is less than 3 run the script
recordingfile="$HOME/Desktop/video-$(date +"%Y-%m-%d-%H-%M-%S").mkv" 
$HOME/bin/ffmpeg \
-hide_banner -loglevel error $2 $3 $4 $5 -i "$1" -c:v copy -c:a copy $tflag $duration "$recordingfile"
if [[ $? -eq 0 ]]; then
    break # break out of the while loop
    exit "$SUCCESS" # exit with $success error code
fi
let count=count+1 # increment count
sleep 1
done
}

# rtmpdump function
record_rtmp () {
printf "%s\n" "Recording: '$videourl'"
count=0 # set count to zero
while [[ "$count" < 3 ]]; do # while count is less than 3 run the script
recordingfile="$HOME/Desktop/video-$(date +"%Y-%m-%d-%H-%M-%S").mkv" 
/usr/local/bin/rtmpdump -q -i "$1" | $HOME/bin/ffmpeg \
-hide_banner -loglevel error -i - -c:v copy -c:a copy $tflag $duration "$recordingfile"
if [[ $? -eq 0 ]]; then # check the ffmpeg exit code is 0, which means the recording worked
   break # break out of the while loop
   exit "$SUCCESS" # exit with $success error code
fi
let count=count+1 # increment count
sleep 1
done
}

#+========================================================+#
# case statement with regular expression                   #
# + to execute ffmpeg commands based on matching url       #
#+========================================================+#

case "$videourl" in
  $videofile)         # video file
       printf "%s\n" 'url matches: $videofile bash pattern'
       record "$videourl";;
  $m3u8)              # m3u8 playlist
       printf "%s\n" 'url matches: $m3u8 bash pattern'
       record "$videourl";;
  $cookiem3u8)        # cookie m3u8
       printf "%s\n" 'url matches: $cookiem3u8 bash pattern'
		 record "$videourl" -cookies "$cookienltid; path=/; $cookiedomain;";;
  $videoqmark)         # video link and question mark
       printf "%s\n" 'url matches: $videoqmark bash pattern'
		 record "$videourl";;
  $xforward)          # xforward
       printf "%s\n" 'url matches: $xforward bash pattern'
       record "$videofile_grep" -headers "'X-Forwarded-For: '"$xforwardip"''$'\r\n'";;
  $useref)            # useragent referer
       printf "%s\n" 'url matches: $useref bash pattern'
       record "$videofile_grep" -user-agent "$useragent" -headers "'Referer: '"$referer"''$'\r\n'";;
  $viduseragent)     # user agent 
       printf "%s\n" 'url matches: $viduseragent bash pattern'
       record "$videofile_grep" -user-agent "$useragent";;
  $useragentreferer) # useragent referer
       printf "%s\n" 'url matches: $useragentreferer bash pattern'
       record "$videofile_grep" -user-agent "$useragent" -headers "'Referer: '"$referer"''$'\r\n'";;
  $refuseragent)      # referer user agent
       printf "%s\n" 'url matches: $refuseragent bash pattern'
       record "$videofile_grep" -headers "'Referer: '"$referer"''$'\r\n'" -user-agent "$useragent";;
  $rtmp)              # rtmp
       printf "%s\n" 'url matches: $rtmp bash pattern'
       record_rtmp "$videourl";;
  $cookiem3u8uagent)  # cookie m3u8 useragent
       printf "%s\n" 'url matches: $cookiem3u8uagent bash pattern'
       record "$videofile_grep" -user-agent "$useragent2" -cookies "$cookieurl; path=/; $cookiedomain;";;
  $http)              # http
       printf "%s\n" 'url matches: $http bash pattern'
		 record "$videourl";;
  *)                  # wildcard
       printf "%s\n" 'url matches: * bash pattern'
		 record "$videourl";;
esac \
&& type -P "$notify" &> /dev/null && [[ $? -eq 0 ]] \
&& "$notify" -sender 'org.xbmc.kodi' -title 'Finished Recording' -message "$videourl"

#+========================================================+#
# turn off shell globbing                                  #
#+========================================================+#

shopt -u extglob 

#+========================================================+#
# exit status SUCCESS if script runs without errors        #
#+========================================================+#

exit "$SUCCESS"
