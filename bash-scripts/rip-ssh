#!/bin/bash

#+========================================================+#
# rip-ssh                                                  # 
#+========================================================+#

# exit status, error codes
SUCCESS=0      # success exit code
E_WRONGARGS=65 # wrong number of arguments passed to script
E_NOMATCH=66   # url not matched by regular expression

# script usage
script_usage="Usage: $(basename "$0") [ssh server] [(http|https|rtmp|rtmpe)://example.com/video-url] ([-t] [00:00:00])"

#+=========================================================+#
# + validate user input for first, second, third, fourth    #
# - arguments passed to script                              #
# + third and fourth arguments passed to script are used    #
# - to specify a recording duration                         #
# + check if 2 or 4 arguments are passed to script          #
# - validate user input and enable shell globbing           #
#+=========================================================+#

# check number of arguments passed to script and exit if not correct
[[ $# -eq 2 || $# -eq 4 ]] || { printf "%s\n" "$script_usage"; exit "$E_WRONGARGS"; }

# check if second argument is a text file or on the command line
[[ "$2" =~ \.txt$ ]] && videourl=$(<"$2") || videourl="$2"

sshserver="$1"                                      # ssh server
first_arg_validated="^[a-zA-Z0-9:0-9./@-]*"         # validate ssh server address
second_arg_validated="^(http|https|rtmp|rtmpe)://*" # matches: http|https|rtmp|rtmpe
third_arg_validated="^-t$"                          # matches: -t
fourth_arg_validated="^[0-9]{2}:[0-9]{2}:[0-9]{2}$" # matches: 00:00:00

tflag="$3"     # third argument should be: -t
duration="$4"  # fourth argument should be in this format: 00:00:00

if [[ $# -eq 2 ]]; then                                # - two argument are passed to the script
   if ! [[ $videourl =~ $second_arg_validated ]]; then # + if videourl doesnt match validation regular expression
      printf "%s\n%s\n" "'$videourl' invalid input" "$script_usage" # + display invalid user input with error message
      exit "$E_NOMATCH"                                # + exit with E_NOMATCH error code
   fi
else [[ $# -eq 4 ]]                                    # - three arguments are passed to the script, validate user input
   if ! [[ $sshserver =~ $first_arg_validated && $videourl =~ $second_arg_validated && $tflag =~ $third_arg_validated && $duration =~ $fourth_arg_validated ]]; then
      printf "%s\n%s\n" "'$1 $2 $3 $4' invalid input" "$script_usage" # + display invalid user input with error message
      exit "$E_NOMATCH"                                # + exit with E_NOMATCH error code
   fi
fi

shopt -s extglob # enable shell globbing 

#+========================================================+#
# case statement switch on pattern match                   #
#+========================================================+#

videofile="@(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.@(mkv|mp4|avi|flv)"
m3u8="@(http|https)://[a-zA-Z0-9:0-9./?=_,@\&%-]*\.m3u8"
videoqmark="@(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.@(mkv|mp4|avi|flv|m3u8)?([^|])[a-zA-Z0-9=?&]*([^|])"
viduseragent="@(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.@(mkv|mp4|avi|flv|m3u8)?([a-zA-Z0-9?\&=%*])*\|[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;%+_-]*([^&])"
useragentreferer="@(http|https)://[a-zA-Z0-9:0-9./?=_\&@%-]*\.@(mkv|mp4|avi|flv|m3u8)?([a-zA-Z0-9=?&]*)\|[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;\&@%+-]*\&[rR]eferer=@(http|https)@(://|%3A%2F%2F)[a-zA-Z%0-9./?=_-]*"
useref="@(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.@(mkv|mp4|avi|flv)\|[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;%+-]*\&[rR]eferer=@(http|https)@(://|%3A%2F%2F)[a-zA-Z%0-9./?=_-]*"
refuseragent="@(http|https)://[a-zA-Z0-9:0-9./?=_-]*?(.m3u8)\|[rR]eferer=@(http|https)@(://|%3A%2F%2F)[a-zA-Z%0-9./?=_-]*\&[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;%+-]*"
xforward="@(http|https)://[a-zA-Z0-9./?=_@%-]*\.m3u8\|X-Forwarded-For=+([0-9])\.+([0-9])\.+([0-9])\.+([0-9])"
http="@(http|https)://[a-zA-Z0-9:0-9/.\&;,~*?%@_=-]*"
rtmp="@(rtmp|rtmpe)://[a-zA-Z0-9[:blank:]#%@!()_=:-/.\&;,~*?]*"
cookiem3u8="@(http|https)://[a-zA-Z0-9:0-9./?=_,@\&%-]*\.m3u8\?nltid=[a-zA-Z0-9\&%_*=]*"
cookiem3u8uagent="@(http|https)://[a-zA-Z0-9:0-9./?=_,@\&%-]*\.@(mkv|mp4|avi|flv|m3u8)?([a-zA-Z0-9/?\&=%.*_-])*\|[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;%+_-]*\&Cookie[a-zA-Z0-9=_]*"

#+========================================================+#
# grep inside url to extract strings                       #
#+========================================================+#

videofile_grep=$(grep -Eo '(http|https)://[a-zA-Z0-9:0-9./?=_,@&%-]*\.(m3u8|mkv|mp4|avi|flv)?([a-zA-Z0-9?&=%*_-]*[^|])' <<<"$videourl" | sed q) 
useragent=$(grep -Eo 'u?User-a?Agent=[a-zA-Z0-9/.()[:blank:],:;%+_-]*[^&]' <<<"$videourl")
useragent2=$(grep -Eo 'u?User-a?Agent=[a-zA-Z0-9/.()[:blank:],:;%+_-]*[^&]' <<<"$videourl" | sed 's/[uU]ser-[aA]gent=//g')
referer=$(grep -Eo 'r?Referer=(http|https)(://|%3A%2F%2F)[a-zA-Z%0-9./?=_-]*' <<<"$videourl" | sed 's/[rR]eferer=//')
xforwardip=$(grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' <<<"$videourl")
cookieurl=$(grep -Eo '[cC]ookie=[a-zA-Z0-9/&%_*~;=_[:blank:]]*' <<<"$videourl" | sed 's/[cC]ookie=//')
cookienltid=$(grep -Eo 'nltid=[a-zA-Z0-9&%_*=]*' <<<"$videourl")
cookiedomain=$(grep -Eo '(http|https)://[a-zA-Z0-9.-]*[^/]' <<<"$videourl" | sed 's/^http\(\|s\):\/\///g')

#+========================================================+#
# recording functions using ffmpeg and rtmpdump           +#
#+========================================================+#

ripconfig="$HOME/.ripconfig"             # config file
[[ -f "$ripconfig" ]] && source "$ripconfig" # check if config file exist
if [[ $ripssh = *[!/] ]]; then ripssh+=/; fi # check if directory has a trailing slash, if not add one

recordingdir="$HOME/" # default recording directory
recordingfile="${ripssh:=$recordingdir}video-$(date +"%Y-%m-%d-%H-%M-%S").mkv" 

record_ssh () {
printf "%s %b %s %s %s %s %s %s\n" \
'ffmpeg -hide_banner -stats -v panic' "${@:2}" '-i' "$1" \
'-c:v copy -c:a copy' $tflag $duration "$recordingfile"
}

record_ssh_rtmp () {
printf "%s %s %s %s %s %s %s\n" \
'rtmpdump -q -i' "$1" \
'| ffmpeg -hide_banner -stats -v panic -i -' \
'-c:v copy -c:a copy' \
$tflag $duration "$recordingfile"
}

#+========================================================+#
# + case statement with regular expression                 #
# - to execute ffmpeg commands based on matching url       #
#+========================================================+#

printf "%s\n" "Sending ffmpeg comamnd to: $sshserver"
		
case "$videourl" in
  $videofile) record_ssh "$videourl" | ssh -fn "$sshserver" $(< /dev/fd/0) &>/dev/null;;
  $m3u8) record_ssh "$videourl" | ssh -fn "$sshserver" $(< /dev/fd/0) &>/dev/null;;
  $cookiem3u8) record_ssh "$videourl" -cookies "$cookienltid; path=/; $cookiedomain;" \
  | ssh -fn "$sshserver" $(< /dev/fd/0) &>/dev/null;;
  $videoqmark) record_ssh "$videourl" | ssh -fn "$sshserver" $(< /dev/fd/0) &>/dev/null;;
  $xforward) record_ssh "$videofile_grep" -headers 'X-Forwarded-For: '"$xforwardip"''$'\r\n' \
  | ssh -fn "$sshserver" $(< /dev/fd/0) &>/dev/null;;
  $useref) record_ssh "$videofile_grep" -user-agent "$useragent" -headers 'Referer: '"$referer"''$'\r\n' \
  | ssh -fn "$sshserver" $(< /dev/fd/0) &>/dev/null;;
  $viduseragent) record_ssh "$videofile_grep" -user-agent "$useragent" \
  | ssh -fn "$sshserver" $(< /dev/fd/0) &>/dev/null;;
  $useragentreferer) record_ssh "$videofile_grep" -user-agent "$useragent" -headers 'Referer: '"$referer"''$'\r\n' \
  | ssh -fn "$sshserver" $(< /dev/fd/0) &>/dev/null;;
  $refuseragent) record_ssh "$videofile_grep" -headers 'Referer: '"$referer"''$'\r\n' -user-agent "$useragent" \
  | ssh -fn "$sshserver" $(< /dev/fd/0) &>/dev/null;;
  $rtmp) record_ssh_rtmp "$videourl" | ssh -fn "$sshserver" $(< /dev/fd/0) &>/dev/null;;
  $cookiem3u8uagent) record_ssh "$videofile_grep" -user-agent "$useragent2" -cookies "$cookieurl; path=/; $cookiedomain;" \
  | ssh -fn "$sshserver" $(< /dev/fd/0) &>/dev/null;;
  $http) record_ssh "$videourl" | ssh -fn "$sshserver" $(< /dev/fd/0) &>/dev/null;;
  *) record_ssh "$videourl" | ssh -fn "$sshserver" $(< /dev/fd/0) &>/dev/null;;
esac 

shopt -u extglob # turn off shell globbing
exit "$SUCCESS" # exit status SUCCESS if script runs without errors
