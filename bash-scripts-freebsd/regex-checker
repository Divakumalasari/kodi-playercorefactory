#!/usr/local/bin/bash

#+========================================================+#
# regex-checker                                            # 
#+========================================================+#

# exit status, error codes
SUCCESS=0      # success exit code
E_WRONGARGS=65 # wrong number of arguments passed to script
E_NOMATCH=66   # url not matched by regular expression

# script usage
script_usage="Usage: $(basename "$0") [(http|https|rtmp|rtmpe)://example.com/video-url]"

#+========================================================+#
# + validate user input for first argument                 #
# - passed to script                                       #
# + check if 1 or 3 arguments are passed to script         #
# - validate user input and enable shell globbing          #
#+========================================================+#

# check number of arguments passed to script and exit if not correct
[[ $# -eq 1 ]] || { printf "%s\n" "$script_usage"; exit "$E_WRONGARGS"; }

# check if first argument is a text file or on the command line
[[ "$1" =~ \.txt$ ]] && videourl=$(<"$1") || videourl="$1"

first_arg_validated="^(http|https|rtmp|rtmpe)://*"    # matches: http|https|rtmp|rtmpe

if [[ $# -eq 1 ]]; then                               # + one argument is passed to the script
   if ! [[ $videourl =~ $first_arg_validated ]]; then # - if videourl doesnt match validation regular expression
      printf "%s\n%s\n" "'$videourl' invalid input" "$script_usage" # - display invalid user input with error message
      exit "$E_NOMATCH"                               # - exit with E_NOMATCH error code
   fi
fi

shopt -s extglob # enable shell globbing 

#+========================================================+#
# case statement switch on pattern match                   #
#+========================================================+#

videofile="@(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.@(mkv|mp4|avi|flv)"
m3u8="@(http|https)://[a-zA-Z0-9:0-9./?=_,@\&%-]*\.m3u8"
videoqmark="@(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.@(mkv|mp4|avi|flv|m3u8)?([^|])[a-zA-Z0-9=?&]*([^|])"
viduseragent="@(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.@(mkv|mp4|avi|flv|m3u8)?([a-zA-Z0-9?\&=%*])*\|[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;%+_-]*([^&])"
useragentreferer="@(http|https)://[a-zA-Z0-9:0-9./?=_\&@%-]*\.@(mkv|mp4|avi|flv|m3u8)?([a-zA-Z0-9=?&]*)\|[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;\&@%+-]*\&[rR]eferer=@(http|https)@(://|%3A%2F%2F)[a-zA-Z%0-9./?=_-]*"
useref="@(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.@(mkv|mp4|avi|flv)\|[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;%+-]*\&[rR]eferer=@(http|https)@(://|%3A%2F%2F)[a-zA-Z%0-9./?=_-]*"
refuseragent="@(http|https)://[a-zA-Z0-9:0-9./?=_-]*?(.m3u8)\|[rR]eferer=@(http|https)@(://|%3A%2F%2F)[a-zA-Z%0-9./?=_-]*\&[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;%+-]*"
xforward="@(http|https)://[a-zA-Z0-9./?=_@%-]*\.m3u8\|X-Forwarded-For=+([0-9])\.+([0-9])\.+([0-9])\.+([0-9])"
http="@(http|https)://[a-zA-Z0-9:0-9/.\&;,~*?%@_=-]*"
rtmp="@(rtmp|rtmpe)://[a-zA-Z0-9[:blank:]#%@!()_=:-/.\&;,~*?]*"
cookiem3u8="@(http|https)://[a-zA-Z0-9:0-9./?=_,@\&%-]*\.m3u8\?nltid=[a-zA-Z0-9\&%_*=]*"
cookiem3u8uagent="@(http|https)://[a-zA-Z0-9:0-9./?=_,@\&%-]*\.@(mkv|mp4|avi|flv|m3u8)?([a-zA-Z0-9/?\&=%.*_-])*\|[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;%+_-]*\&Cookie[a-zA-Z0-9=_]*"

#+========================================================+#
# grep inside url to extract strings                       #
#+========================================================+#

videofile_grep=$(grep -Eo '(http|https)://[a-zA-Z0-9:0-9./?=_,@&%-]*\.(m3u8|mkv|mp4|avi|flv)?([a-zA-Z0-9?&=%*_-]*[^|])' <<<"$videourl" | sed q) 
useragent=$(grep -Eo 'u?User-a?Agent=[a-zA-Z0-9/.()[:blank:],:;%+_-]*[^&]' <<<"$videourl")
useragent2=$(grep -Eo 'u?User-a?Agent=[a-zA-Z0-9/.()[:blank:],:;%+_-]*[^&]' <<<"$videourl" | sed 's/[uU]ser-[aA]gent=//g')
referer=$(grep -Eo 'r?Referer=(http|https)(://|%3A%2F%2F)[a-zA-Z%0-9./?=_-]*' <<<"$videourl" | sed 's/[rR]eferer=//')
xforwardip=$(grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' <<<"$videourl")
cookieurl=$(grep -Eo '[cC]ookie=[a-zA-Z0-9/&%_*~;=_[:blank:]]*' <<<"$videourl" | sed 's/[cC]ookie=//')
cookienltid=$(grep -Eo 'nltid=[a-zA-Z0-9&%_*=]*' <<<"$videourl")
cookiedomain=$(grep -Eo '(http|https)://[a-zA-Z0-9.-]*[^/]' <<<"$videourl" | sed 's/^http\(\|s\):\/\///g')

#+========================================================+#
# config file                                              #
#+========================================================+#

ripconfig="$HOME/.ripconfig"             # config file
[[ -f "$ripconfig" ]] && source "$ripconfig" # check if config file exist
[[ -d "$ripdir" ]] || ripdir=""              # check if directory exists
if [[ $ripdir = *[!/] ]]; then ripdir+=/; fi # check if directory has a trailing slash, if not add one

recordingdir="$HOME/Desktop/" # default recording directory
recordingfile="${ripdir:=$recordingdir}video-$(date +"%Y-%m-%d-%H-%M-%S").mkv" 

#+========================================================+#
# + case statement with regular expression                 #
# - to show matching url                                   #
#+========================================================+#

case "$videourl" in
  $videofile) 
    printf "%s\n%s\n%s\n%s" "video url checked: '$videourl'" \
    "bash pattern match: $videofile" 'bash pattern match: $videofile' 'ffmpeg command: '; \
    printf "%s %s '%s' %s %s %s %s\n" \
    'ffmpeg -hide_banner -stats -v panic' '-i' "$videourl" \
    '-c:v copy -c:a copy' $tflag $duration "$recordingfile";;
  $m3u8)
    printf "%s\n%s\n%s\n%s" "video url checked: '$videourl'" \
    "bash pattern match: $m3u8" 'bash pattern match: $m3u8' 'ffmpeg command: '; \
    printf "%s %s '%s' %s %s %s %s\n" \
    'ffmpeg -hide_banner -stats -v panic' '-i' "$videourl" \
    '-c:v copy -c:a copy' $tflag $duration "$recordingfile";;
  $cookiem3u8) 
    printf "%s\n%s\n%s\n%s" "video url checked: '$videourl'" \
    "bash pattern match: $cookiem3u8" 'bash pattern match: $cookiem3u8' 'ffmpeg command: '; \
    printf "%s %s '%s' %s '%s' %s %s %s %s\n" \
    'ffmpeg -hide_banner -stats -v panic' \
    '-cookies' \
    "$cookienltid; path=/; $cookiedomain;" \
    '-i' "$videourl" '-c:v copy -c:a copy' \
    $tflag $duration "$recordingfile";;
  $videoqmark) 
    printf "%s\n%s\n%s\n%s" "video url checked: '$videourl'" \
    "bash pattern match: $videoqmark" 'bash pattern match: $videoqmark' 'ffmpeg command: '; \
    printf "%s %s '%s' %s %s %s %s\n" \
    'ffmpeg -hide_banner -stats -v panic' '-i' "$videourl" \
    '-c:v copy -c:a copy' $tflag $duration "$recordingfile";;
  $xforward) 
    printf "%s\n%s\n%s\n%s" "video url checked: '$videourl'" \
    "bash pattern match: $xforward" 'bash pattern match: $xforward' 'ffmpeg command: '; \
    printf "%s '%s' %s '%s' %s %s %s %s\n" \
    'ffmpeg -hide_banner -stats -v panic -headers' \
    'X-Forwarded-For: '"$xforwardip"''$'\r\n' \
    '-i' "$videofile_grep" '-c:v copy -c:a copy' \
    $tflag $duration "$recordingfile";;
  $useref)
    printf "%s\n%s\n%s\n%s" "video url checked: '$videourl'" \
    "bash pattern match: $useref" 'bash pattern match: $useref' 'ffmpeg command: '; \
    printf "%s '%s' %s '%s' %s '%s' %s %s %s %s\n" \
    'ffmpeg -hide_banner -stats -v panic -user-agent' "$useragent" \
    '-headers' 'Referer: '"$referer"''$'\r\n' \
    '-i' "$videofile_grep" '-c:v copy -c:a copy' \
    $tflag $duration "$recordingfile";;
  $viduseragent)
    printf "%s\n%s\n%s\n%s" "video url checked: '$videourl'" \
    "bash pattern match: $viduseragent" 'bash pattern match: $viduseragent' 'ffmpeg command: '; \
    printf "%s '%s' %s '%s' %s %s %s %s\n" \
    'ffmpeg -hide_banner -stats -v panic -user-agent' \
    "$useragent" '-i' "$videofile_grep" \
    '-c:v copy -c:a copy' \
    $tflag $duration "$recordingfile";;
  $useragentreferer) 
    printf "%s\n%s\n%s\n%s" "video url checked: '$videourl'" \
    "bash pattern match: $useragentreferer" 'bash pattern match: $useragentreferer' 'ffmpeg command: '; \
    printf "%s '%s' %s '%s' %s '%s' %s %s %s %s\n" \
    'ffmpeg -hide_banner -stats -v panic -user-agent' \
    "$useragent" \
    '-headers' 'Referer: '"$referer"''$'\r\n' \
    '-i' "$videofile_grep" '-c:v copy -c:a copy' \
    $tflag $duration "$recordingfile";;
  $refuseragent) 
    printf "%s\n%s\n%s\n%s" "video url checked: '$videourl'" \
    "bash pattern match: $refuseragent" 'bash pattern match: $refuseragent' 'ffmpeg command: '; \
    printf "%s %s '%s' %s '%s' %s '%s' %s %s %s %s\n" \
    'ffmpeg -hide_banner -stats -v panic' \
    '-headers' 'Referer: '"$referer"''$'\r\n' \
    '-user-agent' "$useragent" \
    '-i' "$videofile_grep" \
    '-c:v copy -c:a copy' \
    $tflag $duration "$recordingfile";;
  $rtmp) 
    printf "%s\n%s\n%s\n%s" "video url checked: '$videourl'" \
    "bash pattern match: $rtmp" 'bash pattern match: $rtmp' 'ffmpeg command: '; \
    printf "%s '%s' %s %s %s %s %s\n" \
    'rtmpdump -q -i' "$videourl" \
    '| ffmpeg -hide_banner -stats -v panic -i -' \
    '-c:v copy -c:a copy' \
    $tflag $duration "$recordingfile";;
  $cookiem3u8uagent)
    printf "%s\n%s\n%s\n%s" "video url checked: '$videourl'" \
    "bash pattern match: $cookiem3u8uagent" 'bash pattern match: $cookiem3u8uagent' 'ffmpeg command: '; \
    printf "%s %s '%s' %s '%s' %s '%s' %s %s %s %s\n" \
    'ffmpeg -hide_banner' \
    '-user-agent' "$useragent2" \
    '-cookies' "$cookieurl; path=/; $cookiedomain;" \
    '-i' "$videofile_grep" '-c:v copy -c:a copy' \
    $tflag $duration "$recordingfile";;
  $http) 
    printf "%s\n%s\n%s\n%s" "video url checked: '$videourl'" \
    "bash pattern match: $http" 'bash pattern match: $http' 'ffmpeg command: '; \
    printf "%s %s '%s' %s %s %s %s\n" \
    'ffmpeg -hide_banner -stats -v panic' '-i' "$videourl" \
    '-c:v copy -c:a copy' $tflag $duration "$recordingfile";;
  *) 
    printf "%s\n%s\n%s\n%s" "video url checked: '$videourl'" \
    'bash pattern match: *' 'bash pattern match: *' 'ffmpeg command: '; \
    printf "%s %s '%s' %s %s %s %s\n" \
    'ffmpeg -hide_banner -stats -v panic' '-i' "$videourl" \
    '-c:v copy -c:a copy' $tflag $duration "$recordingfile";;
esac 

shopt -u extglob # turn off shell globbing
exit "$SUCCESS" # exit status SUCCESS if script runs without errors
